{"file_contents":{"README.md":{"content":"# TEAM-UP\nour first website\n","size_bytes":28},"profile_save.js":{"content":"// Function to get the current profile from local storage\nfunction getProfile() {\n    const profile = localStorage.getItem('userProfile');\n    return profile ? JSON.parse(profile) : { name: 'Your Name', bio: 'Your Skills Here' };\n}\n\n// Function to get the current team members from local storage\nfunction getTeamMembers() {\n    const team = localStorage.getItem('teamMembers');\n    return team ? JSON.parse(team) : [];\n}\n\n// Function to save profile and team data to a local file\nfunction saveProfileToFile() {\n    // Get the current profile and team data from local storage\n    const profile = getProfile();\n    const teamMembers = getTeamMembers();\n\n    // Create a single object to hold all the data\n    const dataToSave = {\n        profile: profile,\n        team: teamMembers\n    };\n\n    // Convert the data object to a formatted JSON string\n    const jsonString = JSON.stringify(dataToSave, null, 2);\n\n    // Create a Blob (Binary Large Object) from the string\n    const blob = new Blob([jsonString], { type: 'application/json' });\n\n    // Create a URL for the Blob object\n    const url = URL.createObjectURL(blob);\n\n    // Create a temporary link element to trigger the download\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'my_profile_data.json'; // Set the desired file name\n    document.body.appendChild(a);\n\n    // Programmatically click the link to start the download\n    a.click();\n\n    // Clean up by revoking the object URL and removing the link\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n}\n\n// Find the save button and attach the event listener\ndocument.addEventListener('DOMContentLoaded', () => {\n    const saveProfileBtn = document.getElementById('save-profile-btn');\n    if (saveProfileBtn) {\n        saveProfileBtn.addEventListener('click', saveProfileToFile);\n    }\n});","size_bytes":1844},"profilecss.css":{"content":"/* General Reset */\r\nbody {\r\n    margin: 0;\r\n    font-family: Arial, sans-serif;\r\n    background: linear-gradient(135deg, #0f0f1e, #1a1a3d);\r\n    color: #fff;\r\n    min-height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n/* Navbar */\r\n.navbar {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    background: rgba(20, 20, 40, 0.9);\r\n    padding: 15px 40px;\r\n    box-shadow: 0 2px 8px rgba(0,0,0,0.4);\r\n}\r\n\r\n.logo {\r\n    font-size: 24px;\r\n    font-weight: bold;\r\n    color: #00f2fe;\r\n}\r\n\r\n.nav-links a {\r\n    margin-left: 20px;\r\n    text-decoration: none;\r\n    color: #fff;\r\n    font-weight: 500;\r\n    transition: 0.3s;\r\n}\r\n\r\n.nav-links a:hover {\r\n    color: #00f2fe;\r\n}\r\n\r\n.btn {\r\n    background: linear-gradient(135deg, #00f2fe, #4facfe);\r\n    padding: 8px 16px;\r\n    border-radius: 20px;\r\n    color: #fff;\r\n    text-decoration: none;\r\n    font-weight: bold;\r\n    transition: 0.3s;\r\n    border: none;\r\n    cursor: pointer;\r\n}\r\n\r\n.btn:hover {\r\n    transform: scale(1.05);\r\n    box-shadow: 0 0 12px rgba(0,242,254,0.6);\r\n}\r\n\r\n/* Profile Section - UPDATED FOR FLEXBOX */\r\n.profile-section {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: flex-start; /* Aligns cards to the top */\r\n    padding: 60px 20px;\r\n    gap: 40px; /* Creates space between the two cards */\r\n    flex-wrap: wrap; /* Allows cards to stack on smaller screens */\r\n    flex: 1; /* Ensures the main section grows to push the footer down */\r\n}\r\n\r\n/* Profile Card */\r\n.profile-card {\r\n    background: rgba(255, 255, 255, 0.05);\r\n    padding: 40px;\r\n    border-radius: 15px;\r\n    text-align: center;\r\n    width: 320px;\r\n    backdrop-filter: blur(10px);\r\n    border: 1px solid rgba(0, 242, 254, 0.3);\r\n    box-shadow: 0 0 20px rgba(0, 242, 254, 0.15);\r\n    flex-shrink: 0; /* Prevents card from shrinking */\r\n}\r\n\r\n.profile-pic {\r\n    width: 120px;\r\n    height: 120px;\r\n    border-radius: 50%;\r\n    margin-bottom: 15px;\r\n    object-fit: cover;\r\n    border: 3px solid #00f2fe;\r\n    box-shadow: 0 0 15px rgba(0,242,254,0.5);\r\n}\r\n\r\n.profile-card h2 {\r\n    font-size: 24px;\r\n    margin: 10px 0;\r\n    background: linear-gradient(135deg, #00f2fe, #4facfe);\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n}\r\n\r\n.profile-card p {\r\n    margin: 5px 0;\r\n    font-size: 16px;\r\n    color: rgba(255, 255, 255, 0.85);\r\n}\r\n\r\n/* Teams Card Styling */\r\n.teams-card {\r\n    background: rgba(255, 255, 255, 0.05);\r\n    padding: 30px 40px;\r\n    border-radius: 15px;\r\n    width: 380px;\r\n    backdrop-filter: blur(10px);\r\n    border: 1px solid rgba(0, 242, 254, 0.3);\r\n    box-shadow: 0 0 20px rgba(0, 242, 254, 0.15);\r\n    flex-shrink: 0;\r\n}\r\n\r\n.teams-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 20px;\r\n    padding-bottom: 15px;\r\n    border-bottom: 1px solid rgba(0, 242, 254, 0.3);\r\n}\r\n\r\n.teams-header h2 {\r\n    margin: 0;\r\n    color: #00f2fe;\r\n}\r\n\r\n#member-counter {\r\n    font-size: 14px;\r\n    color: rgba(255, 255, 255, 0.8);\r\n    background: rgba(0,0,0,0.25);\r\n    padding: 4px 12px;\r\n    border-radius: 15px;\r\n}\r\n\r\n/* Member Placeholders Styling */\r\n.team-member-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 12px;\r\n}\r\n\r\n.member-placeholder {\r\n    background: rgba(0, 0, 0, 0.25);\r\n    padding: 10px 15px;\r\n    border-radius: 8px;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 15px;\r\n    border: 1px solid transparent;\r\n    transition: border-color 0.3s, background-color 0.3s;\r\n}\r\n\r\n.member-placeholder:hover {\r\n    background-color: rgba(0, 0, 0, 0.4);\r\n    border-color: rgba(0, 242, 254, 0.2);\r\n}\r\n\r\n.member-avatar {\r\n    width: 40px;\r\n    height: 40px;\r\n    flex-shrink: 0;\r\n    border-radius: 50%;\r\n    background: rgba(255, 255, 255, 0.05);\r\n    border: 2px dashed rgba(0, 242, 254, 0.4);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: rgba(0, 242, 254, 0.6);\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n}\r\n\r\n.member-placeholder span {\r\n    color: rgba(255, 255, 255, 0.7);\r\n}\r\n\r\n/* Modal specific styles */\r\n.modal {\r\n    display: none;\r\n    position: fixed;\r\n    z-index: 1001;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: auto;\r\n    background-color: rgba(0,0,0,0.5);\r\n    backdrop-filter: blur(5px);\r\n}\r\n\r\n.modal-content {\r\n    background: linear-gradient(135deg, #1a1a3d, #0f0f1e);\r\n    color: #fff;\r\n    margin: 15% auto;\r\n    padding: 30px;\r\n    border: 1px solid rgba(0, 242, 254, 0.3);\r\n    width: 80%;\r\n    max-width: 500px;\r\n    border-radius: 15px;\r\n    box-shadow: 0 0 25px rgba(0, 242, 254, 0.3);\r\n}\r\n\r\n.close-btn {\r\n    color: #fff;\r\n    float: right;\r\n    font-size: 28px;\r\n    font-weight: bold;\r\n    opacity: 0.7;\r\n    transition: opacity 0.3s;\r\n    cursor: pointer;\r\n}\r\n\r\n.close-btn:hover {\r\n    opacity: 1;\r\n}\r\n\r\n.modal-input-group {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.modal-input-group label {\r\n    display: block;\r\n    margin-bottom: 8px;\r\n    font-weight: bold;\r\n    color: #00f2fe;\r\n}\r\n\r\n.modal-input-group input {\r\n    width: 100%;\r\n    padding: 10px;\r\n    box-sizing: border-box;\r\n    border: 1px solid rgba(0, 242, 254, 0.3);\r\n    border-radius: 4px;\r\n    background: rgba(255, 255, 255, 0.05);\r\n    color: #fff;\r\n}\r\n\r\n.modal-content .btn {\r\n    display: block;\r\n    width: 100%;\r\n    padding: 12px;\r\n    font-size: 1.1em;\r\n    margin-top: 10px;\r\n}\r\n\r\n/* Footer */\r\n.footer {\r\n    text-align: center;\r\n    padding: 15px;\r\n    background: rgba(20, 20, 40, 0.9);\r\n    font-size: 14px;\r\n    color: #aaa;\r\n    margin-top: auto;\r\n}\r\n\r\n/* Responsive Design */\r\n@media (max-width: 800px) {\r\n    .profile-section {\r\n        flex-direction: column;\r\n        align-items: center;\r\n        gap: 30px;\r\n    }\r\n    .profile-card, .teams-card {\r\n        width: 90%;\r\n        max-width: 400px;\r\n    }\r\n}\r\n\r\n","size_bytes":5848},"script.js":{"content":"","size_bytes":0},"server.js":{"content":"const express = require(\"express\");\nconst bcrypt = require(\"bcryptjs\");\nconst cors = require(\"cors\");\nconst path = require(\"path\");\n\nconst app = express();\n\n// Middleware\napp.use(express.json());\napp.use(cors());\n\n// Serve static files\napp.use(express.static(__dirname));\n\n// Cache control for images and assets\napp.use((req, res, next) => {\n  if (req.url.match(/\\.(jpg|jpeg|png|gif|js|css|html)$/)) {\n    res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n    res.set('Pragma', 'no-cache');\n    res.set('Expires', '0');\n  }\n  next();\n});\n\n// In-memory user storage (for demo purposes)\nconst users = [];\nconst connections = [];\n\n// API Routes\n\n// Signup route\napp.post(\"/signup\", async (req, res) => {\n  try {\n    const { name, email, skills, password } = req.body;\n    const existingUser = users.find(user => user.email === email);\n    if (existingUser) return res.status(400).json({ message: \"Email already registered\" });\n\n    const hashedPass = await bcrypt.hash(password, 10);\n    const newUser = { \n      id: Date.now(), \n      name, \n      email, \n      skills, \n      password: hashedPass,\n      connections: [],\n      pendingRequests: [],\n      sentRequests: []\n    };\n    users.push(newUser);\n    res.json({ message: \"Signup successful\" });\n  } catch (err) {\n    res.status(500).json({ message: \"Server error\" });\n  }\n});\n\n// Login route\napp.post(\"/login\", async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    const user = users.find(u => u.email === email);\n    if (!user) return res.status(400).json({ message: \"Invalid email or password\" });\n\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) return res.status(400).json({ message: \"Invalid email or password\" });\n\n    // Return user without password\n    const { password: _, ...userWithoutPassword } = user;\n    res.json({ message: \"Login successful\", user: userWithoutPassword });\n  } catch (err) {\n    res.status(500).json({ message: \"Server error\" });\n  }\n});\n\n// Get all users (for finding connections)\napp.get(\"/users\", (req, res) => {\n  const usersWithoutPasswords = users.map(({ password, ...user }) => user);\n  res.json(usersWithoutPasswords);\n});\n\n// Send connection request\napp.post(\"/connections/request\", (req, res) => {\n  try {\n    const { fromUserId, toUserId } = req.body;\n    const fromUser = users.find(u => u.id === fromUserId);\n    const toUser = users.find(u => u.id === toUserId);\n    \n    if (!fromUser || !toUser) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n\n    // Check if request already exists\n    if (toUser.pendingRequests.includes(fromUserId) || fromUser.sentRequests.includes(toUserId)) {\n      return res.status(400).json({ message: \"Request already sent\" });\n    }\n\n    // Check if already connected\n    if (fromUser.connections.includes(toUserId) || toUser.connections.includes(fromUserId)) {\n      return res.status(400).json({ message: \"Already connected\" });\n    }\n\n    toUser.pendingRequests.push(fromUserId);\n    fromUser.sentRequests.push(toUserId);\n    \n    res.json({ message: \"Connection request sent\" });\n  } catch (err) {\n    res.status(500).json({ message: \"Server error\" });\n  }\n});\n\n// Accept connection request\napp.post(\"/connections/accept\", (req, res) => {\n  try {\n    const { userId, requesterId } = req.body;\n    const user = users.find(u => u.id === userId);\n    const requester = users.find(u => u.id === requesterId);\n    \n    if (!user || !requester) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n\n    // Remove from pending/sent requests\n    user.pendingRequests = user.pendingRequests.filter(id => id !== requesterId);\n    requester.sentRequests = requester.sentRequests.filter(id => id !== userId);\n    \n    // Add to connections\n    user.connections.push(requesterId);\n    requester.connections.push(userId);\n    \n    res.json({ message: \"Connection accepted\" });\n  } catch (err) {\n    res.status(500).json({ message: \"Server error\" });\n  }\n});\n\n// Reject connection request\napp.post(\"/connections/reject\", (req, res) => {\n  try {\n    const { userId, requesterId } = req.body;\n    const user = users.find(u => u.id === userId);\n    const requester = users.find(u => u.id === requesterId);\n    \n    if (!user || !requester) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n\n    // Remove from pending/sent requests\n    user.pendingRequests = user.pendingRequests.filter(id => id !== requesterId);\n    requester.sentRequests = requester.sentRequests.filter(id => id !== userId);\n    \n    res.json({ message: \"Connection rejected\" });\n  } catch (err) {\n    res.status(500).json({ message: \"Server error\" });\n  }\n});\n\n// Get user connections and requests\napp.get(\"/user/:userId/connections\", (req, res) => {\n  try {\n    const userId = parseInt(req.params.userId);\n    const user = users.find(u => u.id === userId);\n    \n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n\n    const connections = user.connections.map(id => users.find(u => u.id === id)).filter(Boolean);\n    const pendingRequests = user.pendingRequests.map(id => users.find(u => u.id === id)).filter(Boolean);\n    const sentRequests = user.sentRequests.map(id => users.find(u => u.id === id)).filter(Boolean);\n    \n    // Remove passwords from all user objects\n    const cleanConnections = connections.map(({ password, ...user }) => user);\n    const cleanPendingRequests = pendingRequests.map(({ password, ...user }) => user);\n    const cleanSentRequests = sentRequests.map(({ password, ...user }) => user);\n    \n    res.json({\n      connections: cleanConnections,\n      pendingRequests: cleanPendingRequests,\n      sentRequests: cleanSentRequests\n    });\n  } catch (err) {\n    res.status(500).json({ message: \"Server error\" });\n  }\n});\n\n// Serve main page\napp.get('/', (req, res) => {\n  res.sendFile(path.join(__dirname, 'index.html'));\n});\n\napp.listen(5000, \"0.0.0.0\", () => {\n  console.log(\"✅ Team-Up server running on http://0.0.0.0:5000\");\n  console.log(\"📁 Serving static files from current directory\");\n  console.log(\"🎯 Frontend ready for connections and collaboration!\");\n});\n","size_bytes":6171},"styles.css":{"content":"/* ---- Reset ---- */\r\n* { \r\n  margin: 0; \r\n  padding: 0; \r\n  box-sizing: border-box; \r\n}\r\n\r\nbody {\r\n  font-family: \"Segoe UI\", Tahoma, sans-serif;\r\n  background: linear-gradient(135deg, #0f0c29, #302b63);\r\n  color: #fff;\r\n  line-height: 1.6;\r\n  min-height: 100vh;\r\n  overflow-x: hidden;\r\n}\r\n\r\n/* ---- Background Canvas ---- */\r\n#bg-canvas {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: -1; /* stays behind content */\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n/* ---- Navbar ---- */\r\n.navbar {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background: rgba(255, 255, 255, 0.05);\r\n  padding: 15px 30px;\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: 1000;\r\n  border-bottom: 1px solid rgba(255, 255, 255, 0.15);\r\n  box-shadow: 0 0 10px rgba(0, 255, 255, 0.15);\r\n  backdrop-filter: blur(6px);\r\n}\r\n\r\n.logo {\r\n  font-size: 1.8em;\r\n  font-weight: bold;\r\n  background: linear-gradient(135deg, #00f2fe, #4facfe);\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n}\r\n\r\n.nav-links a {\r\n  margin: 0 12px;\r\n  color: #fff;\r\n  text-decoration: none;\r\n  font-weight: 500;\r\n  transition: 0.3s;\r\n}\r\n\r\n.nav-links a:hover {\r\n  color: #00e5ff;\r\n}\r\n\r\n.btn {\r\n  background: linear-gradient(135deg, #00f2fe, #4facfe);\r\n  padding: 8px 14px;\r\n  border-radius: 6px;\r\n  font-weight: 600;\r\n  transition: background 0.3s, transform 0.2s;\r\n}\r\n\r\n.btn:hover {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.profile-btn {\r\n  display: inline-block;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  padding: 8px 12px;\r\n  border-radius: 50%;\r\n  border: 1px solid rgba(255, 255, 255, 0.2);\r\n  transition: 0.3s;\r\n}\r\n\r\n.profile-btn:hover {\r\n  background: rgba(255, 255, 255, 0.2);\r\n}\r\n\r\n/* ---- Hero ---- */\r\n.hero {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 60px 40px;\r\n  gap: 40px;\r\n}\r\n\r\n.hero-text {\r\n  flex: 1;\r\n  max-width: 50%;\r\n}\r\n\r\n.hero-text h2 {\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n  background: linear-gradient(135deg, #00f2fe, #4facfe);\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.hero-text p {\r\n  font-size: 18px;\r\n  color: rgba(255, 255, 255, 0.85);\r\n  line-height: 1.6;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.hero-btn {\r\n  display: inline-block;\r\n  margin-top: 10px;\r\n}\r\n\r\n.hero-image {\r\n  flex: 1;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.hero-image img {\r\n  max-width: 65%;    /* smaller image */\r\n  height: auto;\r\n  border-radius: 12px;\r\n  box-shadow: 0 0 15px rgba(0, 255, 255, 0.3);\r\n  transition: transform 0.3s, box-shadow 0.3s;\r\n}\r\n\r\n.hero-image img:hover {\r\n  transform: scale(1.05);\r\n  box-shadow: 0 0 25px rgba(0, 255, 255, 0.5);\r\n}\r\n\r\n/* ---- Features ---- */\r\n.features {\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 40px 20px;\r\n  gap: 20px;\r\n}\r\n\r\n.feature-box {\r\n  flex: 1;\r\n  padding: 25px;\r\n  border-radius: 12px;\r\n  text-align: center;\r\n  background: rgba(255, 255, 255, 0.05);\r\n  border: 1px solid rgba(255, 255, 255, 0.15);\r\n  box-shadow: 0 0 12px rgba(0, 255, 255, 0.15);\r\n  transition: transform 0.3s, box-shadow 0.3s;\r\n}\r\n\r\n.feature-box:hover {\r\n  transform: translateY(-6px);\r\n  box-shadow: 0 0 18px rgba(0, 255, 255, 0.3);\r\n}\r\n\r\n.feature-box img {\r\n  width: 120px;         \r\n  height: 120px;\r\n  object-fit: contain;  \r\n  margin-bottom: 15px;\r\n}\r\n\r\n.feature-box h3 {\r\n  margin-bottom: 10px;\r\n  font-size: 20px;\r\n  color: #00e5ff;\r\n}\r\n\r\n/* ---- Footer ---- */\r\n.footer {\r\n  text-align: center;\r\n  padding: 20px;\r\n  margin-top: 40px;\r\n  background: rgba(255, 255, 255, 0.05);\r\n  border-top: 1px solid rgba(255, 255, 255, 0.15);\r\n  color: rgba(255, 255, 255, 0.8);\r\n}\r\n\r\n/* ---- Responsive ---- */\r\n@media (max-width: 768px) {\r\n  .hero {\r\n    flex-direction: column;\r\n    text-align: center;\r\n  }\r\n  .hero-text, .hero-image {\r\n    max-width: 100%;\r\n  }\r\n  .hero-image img {\r\n    max-width: 90%;  \r\n  }\r\n  .features {\r\n    flex-direction: column;\r\n  }\r\n}","size_bytes":3927},"models/User.js":{"content":"const mongoose = require(\"mongoose\");\n\nconst userSchema = new mongoose.Schema({\n  name: String,\n  email: { type: String, unique: true },\n  skills: String,\n  password: String,\n});\n\nmodule.exports = mongoose.model(\"User\", userSchema);\n","size_bytes":233},"login.js":{"content":"// Login form functionality\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  const loginForm = document.querySelector(\".login-form\");\n  if (loginForm) {\n    loginForm.addEventListener(\"submit\", async (e) => {\n      e.preventDefault();\n      const email = document.getElementById(\"username\").value;\n      const password = document.getElementById(\"password\").value;\n      \n      const data = { email, password };\n\n      try {\n        const res = await fetch(\"/login\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(data),\n        });\n\n        const result = await res.json();\n        \n        if (res.ok) {\n          // Store user data in sessionStorage for use across pages\n          sessionStorage.setItem('currentUser', JSON.stringify(result.user));\n          alert(result.message);\n          window.location.href = \"profile.html\";\n        } else {\n          alert(result.message);\n        }\n      } catch (error) {\n        alert(\"Login failed. Please try again.\");\n      }\n    });\n  }\n});","size_bytes":1073}},"version":1}